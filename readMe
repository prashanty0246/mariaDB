import { AppDataSource } from "../data-source";

export const getRecursiveCall = async (
  Where: Object,
  Write: Object,
  Repository: any,
  cb: Function,
  counter: number,
  qyeryType: string = "INSERT"
): Promise<any> => {
  try {
    if (counter >= 5) {
      return cb({ error: true, data: null });
    }

    setTimeout(async () => {
      try {
        if (qyeryType === "INSERT") {
          const res = await Repository.save(Write);
          if (res) {
            return cb({ error: false, data: res });
          }
        }

        if (qyeryType === "UPDATE") {
          const res = await Repository.update(Where, Write);
          if (res) {
            return cb({ error: false, data: res });
          }
        }

        if (qyeryType === "SELECT") {
          const res = Object.keys(Where).length
            ? await Repository.find(Where)
            : await Repository.find();

          if (res) {
            return cb({ error: false, data: JSON.parse(JSON.stringify(res)) });
          }
        }

        if (qyeryType === "COUNT") {
          const res = Object.keys(Where).length
            ? await Repository.count(Where)
            : await Repository.count();

          if (res) {
            return cb({ error: false, data: JSON.parse(res) });
          }
        }

        if (qyeryType === "SELECT_ONE") {
          const res = await Repository.findOne(Where);

          if (res) {
            return cb({ error: false, data: JSON.parse(res) });
          }
        }

        getRecursiveCall(Where, Write, Repository, cb, counter + 1, qyeryType);
      } catch (error) {
        getRecursiveCall(Where, Write, Repository, cb, counter + 1, qyeryType);
      }
    }, 2000);
  } catch (error) {
    console.log(`getRecursiveCall Failed ::----::`, error.message);
    getRecursiveCall(Where, Write, Repository, cb, counter + 1, qyeryType);
  }
};

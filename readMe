
 const data = await AppDataSource
    .getRepository(BankInfo)
    .createQueryBuilder("bank_info")
    .select("SUM(rate_limit)", "total")
    .where("member_id = :member_id", { member_id: 123456})
    .getRawOne()
    
    
            const {count} = await AppDataSource
        .getRepository(TokenRequestByStatus)
        .createQueryBuilder("token_request_by_status")
        .select("count(*)", 'count')
        .where("status = :status", { status: 'OK', doc_type: 'DRAFT'})
        .getRawOne()

  TokenRequestData = await TokenRequestByStatusRepository.find(
                {
                   where: {
                    doc_type: In( [ 'DRAFT','PENDING']),
                    status: 'OK'
                   },
                //    skip: 1000 * 1,
                //    take: 1000
                }
            )

            count = await AppDataSource
            .getRepository(TokenRequestByStatus)
            .createQueryBuilder("token_request_by_status")
            .select("count(*)", 'count')
            .where("status = :status", { status: 'OK', doc_type: ['PENDING', 'DRAFT']})
            .getRawOne()
const {Between} = require('typeorm')

const ELEMENT_TYPE_MAP = {
  value: "decimal",
  serial_no: "string",
  status: "string",
  creation_timestamp: "string",
 };

 const getTokensList = async (
  queryParams
) => {
  // form the where clause
  let filterQuery = "";
  let txnIdQuery = "";
  let result;
  const condition = {}

  if (queryParams.filterBy != "") {
    filterQuery = "" + queryParams.filterBy;

    let qs = ELEMENT_TYPE_MAP[queryParams.filterBy] === "string" ? "'" : "";
    if (queryParams.filterType === "value") {
      Object.assign(condition , {where: {[queryParams.filterType]: queryParams.filterValue}})
    } else if (queryParams.filterType === "range") {
      Object.assign(condition , {where: {[queryParams.filterType]: Between(queryParams.filterStart, queryParams.filterEnd)}})

    }
  }

  console.log(condition)
}

getTokensList({
  filterType: 'range',
  filterStart: '2022-02-21',
  filterBy: 'creation_timestamp',
  filterEnd: "2022-02-21",
  filterValue: '30'
})

  if (queryParams.request_id != "") {
    txnIdQuery = "" + "request_id = '" + queryParams.request_id + "'";
    Logger.debug("Query -1: " + txnIdQuery);
    if (queryParams.filterBy != "") {
      txnIdQuery = txnIdQuery + "AND" + filterQuery;
    }
  }
